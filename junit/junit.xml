<?xml version="1.0" encoding="utf-8"?><testsuite errors="1" failures="0" name="pytest" skips="0" tests="1" time="2.015"><testcase classname="" file="parsyfiles/tests/pytest_integration/test_pytest.py" name="parsyfiles.tests.pytest_integration.test_pytest" time="0"><error message="collection failure">parsyfiles/plugins_base/support_for_objects.py:224: in _is_valid_for_dict_to_object_conversion
    res, subclasses_hash = _cache_valid_for_dict_to_object[to_type][strict_mode]
E   KeyError: False

During handling of the above exception, another exception occurred:
parsyfiles/tests/pytest_integration/test_pytest.py:12: in &lt;module&gt;
    pprint(get_capabilities_for_type(ExecOpTest))
parsyfiles/parsing_fw.py:443: in get_capabilities_for_type
    return get_default_parser().get_capabilities_for_type(typ, strict_type_matching=strict_type_matching)
parsyfiles/parsing_fw.py:372: in get_default_parser
    return RootParser()
parsyfiles/parsing_fw.py:158: in __new__
    c = DefaultRootParser.get_singleton_copy()
parsyfiles/parsing_fw.py:324: in get_singleton_copy
    return DefaultRootParser.__new__(DefaultRootParser, this_is_an_explicit_call=True)
parsyfiles/parsing_fw.py:335: in __new__
    DefaultRootParser.__init__(inst)
parsyfiles/parsing_fw.py:353: in __init__
    register_default_plugins(self)
parsyfiles/parsing_fw.py:104: in register_default_plugins
    root_parser.register_converters(get_default_object_converters(root_parser))
parsyfiles/parsing_registries.py:1159: in register_converters
    self.register_converter(converter)
parsyfiles/parsing_registries.py:1201: in register_converter
    = self._create_all_new_chains(converter)
parsyfiles/parsing_registries.py:1266: in _create_all_new_chains
    elif (not self.strict) and existing_specific.can_be_appended_to(converter, strict=False):
parsyfiles/converting_core.py:295: in can_be_appended_to
    and left_converter.is_able_to_convert(strict, from_type=JOKER, to_type=self.from_type)
parsyfiles/converting_core.py:178: in is_able_to_convert
    return self.is_able_to_convert_detailed(strict=strict, from_type=from_type, to_type=to_type)[0]
parsyfiles/converting_core.py:216: in is_able_to_convert_detailed
    to_type=None if to_type is JOKER else to_type):
parsyfiles/plugins_base/support_for_objects.py:234: in _is_valid_for_dict_to_object_conversion
    subclasses_hash = hash(tuple(get_all_subclasses(to_type)))
parsyfiles/type_inspection_tools.py:287: in get_all_subclasses
    for t in get_all_subclasses(typpp, recursive=True, memo=memo):
parsyfiles/type_inspection_tools.py:284: in get_all_subclasses
    result = [t for t in sub_list if t is not typ and is_subtype(t, typ, bound_typevars={})]
parsyfiles/type_inspection_tools.py:284: in &lt;listcomp&gt;
    result = [t for t in sub_list if t is not typ and is_subtype(t, typ, bound_typevars={})]
../../../virtualenv/python3.5.5/lib/python3.5/site-packages/pytypes/type_util.py:1312: in _issubclass
    res = _issubclass_2(subclass, superclass, bound_Generic, bound_typevars)
../../../virtualenv/python3.5.5/lib/python3.5/site-packages/pytypes/type_util.py:1327: in _issubclass_2
    return _issubclass_Generic(subclass, superclass, bound_Generic, bound_typevars)
../../../virtualenv/python3.5.5/lib/python3.5/site-packages/pytypes/type_util.py:1094: in _issubclass_Generic
    if not _issubclass(p_cls, p_self, bound_Generic, bound_typevars):
../../../virtualenv/python3.5.5/lib/python3.5/site-packages/pytypes/type_util.py:1312: in _issubclass
    res = _issubclass_2(subclass, superclass, bound_Generic, bound_typevars)
../../../virtualenv/python3.5.5/lib/python3.5/site-packages/pytypes/type_util.py:1327: in _issubclass_2
    return _issubclass_Generic(subclass, superclass, bound_Generic, bound_typevars)
../../../virtualenv/python3.5.5/lib/python3.5/site-packages/pytypes/type_util.py:1157: in _issubclass_Generic
    if type.__subclasscheck__(superclass, subclass):
E   TypeError: issubclass() arg 1 must be a class</error></testcase></testsuite>